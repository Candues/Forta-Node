// Code generated by MockGen. DO NOT EDIT.
// Source: store/updater.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdaterStore is a mock of UpdaterStore interface.
type MockUpdaterStore struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterStoreMockRecorder
}

// MockUpdaterStoreMockRecorder is the mock recorder for MockUpdaterStore.
type MockUpdaterStoreMockRecorder struct {
	mock *MockUpdaterStore
}

// NewMockUpdaterStore creates a new mock instance.
func NewMockUpdaterStore(ctrl *gomock.Controller) *MockUpdaterStore {
	mock := &MockUpdaterStore{ctrl: ctrl}
	mock.recorder = &MockUpdaterStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdaterStore) EXPECT() *MockUpdaterStoreMockRecorder {
	return m.recorder
}

// GetLatestReference mocks base method.
func (m *MockUpdaterStore) GetLatestReference() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestReference")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestReference indicates an expected call of GetLatestReference.
func (mr *MockUpdaterStoreMockRecorder) GetLatestReference() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestReference", reflect.TypeOf((*MockUpdaterStore)(nil).GetLatestReference))
}
