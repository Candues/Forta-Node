// Code generated by MockGen. DO NOT EDIT.
// Source: services/publisher/publisher.go

// Package mock_publisher is a generated GoMock package.
package mock_publisher

import (
	context "context"
	io "io"
	big "math/big"
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	protocol "github.com/forta-protocol/forta-node/protocol"
	gomock "github.com/golang/mock/gomock"
	shell "github.com/ipfs/go-ipfs-api"
)

// MockTestAlertLogger is a mock of TestAlertLogger interface.
type MockTestAlertLogger struct {
	ctrl     *gomock.Controller
	recorder *MockTestAlertLoggerMockRecorder
}

// MockTestAlertLoggerMockRecorder is the mock recorder for MockTestAlertLogger.
type MockTestAlertLoggerMockRecorder struct {
	mock *MockTestAlertLogger
}

// NewMockTestAlertLogger creates a new mock instance.
func NewMockTestAlertLogger(ctrl *gomock.Controller) *MockTestAlertLogger {
	mock := &MockTestAlertLogger{ctrl: ctrl}
	mock.recorder = &MockTestAlertLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestAlertLogger) EXPECT() *MockTestAlertLoggerMockRecorder {
	return m.recorder
}

// LogTestAlert mocks base method.
func (m *MockTestAlertLogger) LogTestAlert(arg0 context.Context, arg1 *protocol.SignedAlert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogTestAlert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogTestAlert indicates an expected call of LogTestAlert.
func (mr *MockTestAlertLoggerMockRecorder) LogTestAlert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogTestAlert", reflect.TypeOf((*MockTestAlertLogger)(nil).LogTestAlert), arg0, arg1)
}

// MockEthClient is a mock of EthClient interface.
type MockEthClient struct {
	ctrl     *gomock.Controller
	recorder *MockEthClientMockRecorder
}

// MockEthClientMockRecorder is the mock recorder for MockEthClient.
type MockEthClientMockRecorder struct {
	mock *MockEthClient
}

// NewMockEthClient creates a new mock instance.
func NewMockEthClient(ctrl *gomock.Controller) *MockEthClient {
	mock := &MockEthClient{ctrl: ctrl}
	mock.recorder = &MockEthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthClient) EXPECT() *MockEthClientMockRecorder {
	return m.recorder
}

// BlockNumber mocks base method.
func (m *MockEthClient) BlockNumber(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockNumber", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumber indicates an expected call of BlockNumber.
func (mr *MockEthClientMockRecorder) BlockNumber(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumber", reflect.TypeOf((*MockEthClient)(nil).BlockNumber), ctx)
}

// MockAlertsContract is a mock of AlertsContract interface.
type MockAlertsContract struct {
	ctrl     *gomock.Controller
	recorder *MockAlertsContractMockRecorder
}

// MockAlertsContractMockRecorder is the mock recorder for MockAlertsContract.
type MockAlertsContractMockRecorder struct {
	mock *MockAlertsContract
}

// NewMockAlertsContract creates a new mock instance.
func NewMockAlertsContract(ctrl *gomock.Controller) *MockAlertsContract {
	mock := &MockAlertsContract{ctrl: ctrl}
	mock.recorder = &MockAlertsContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlertsContract) EXPECT() *MockAlertsContractMockRecorder {
	return m.recorder
}

// AddAlertBatch mocks base method.
func (m *MockAlertsContract) AddAlertBatch(_chainId, _blockStart, _blockEnd, _alertCount, _maxSeverity *big.Int, _ref string) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAlertBatch", _chainId, _blockStart, _blockEnd, _alertCount, _maxSeverity, _ref)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAlertBatch indicates an expected call of AddAlertBatch.
func (mr *MockAlertsContractMockRecorder) AddAlertBatch(_chainId, _blockStart, _blockEnd, _alertCount, _maxSeverity, _ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAlertBatch", reflect.TypeOf((*MockAlertsContract)(nil).AddAlertBatch), _chainId, _blockStart, _blockEnd, _alertCount, _maxSeverity, _ref)
}

// MockIPFS is a mock of IPFS interface.
type MockIPFS struct {
	ctrl     *gomock.Controller
	recorder *MockIPFSMockRecorder
}

// MockIPFSMockRecorder is the mock recorder for MockIPFS.
type MockIPFSMockRecorder struct {
	mock *MockIPFS
}

// NewMockIPFS creates a new mock instance.
func NewMockIPFS(ctrl *gomock.Controller) *MockIPFS {
	mock := &MockIPFS{ctrl: ctrl}
	mock.recorder = &MockIPFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPFS) EXPECT() *MockIPFSMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIPFS) Add(r io.Reader, options ...shell.AddOpts) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{r}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIPFSMockRecorder) Add(r interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{r}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIPFS)(nil).Add), varargs...)
}
