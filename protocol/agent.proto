syntax = "proto3";

option go_package = "./;protocol";

service Agent {
  rpc Initialize (InitializeRequest) returns (InitializeResponse) {}
  rpc EvaluateTx (EvaluateTxRequest) returns (EvaluateTxResponse) {}
  rpc EvaluateBlock (EvaluateBlockRequest) returns (EvaluateBlockResponse) {}
}

message Error {
  string message = 1;
}

enum ResponseStatus {
  UNKNOWN = 0;
  ERROR = 1;
  SUCCESS = 2;
}

message InitializeRequest {
  string agentId = 1;
  string proxyHost = 2;
}

message InitializeResponse {
  ResponseStatus status = 1;
  repeated Error errors = 2;
  repeated string addresses = 3;
}

message EvaluateTxRequest {
  string requestId = 1;
  TransactionEvent event = 2;
}

message EvaluateBlockRequest {
  string requestId = 1;
  BlockEvent event = 2;
}

message Finding {
  enum Severity {
    UNKNOWN = 0;
    INFO = 1;
    LOW = 2;
    MEDIUM = 3;
    HIGH = 4;
    CRITICAL = 5;
  }

  enum FindingType {
    UNKNOWN_TYPE = 0;
    EXPLOIT = 1;
    SUSPICIOUS = 2;
    DEGRADED = 3;
  }

  string protocol = 1;
  Severity severity = 2;
  map<string, string> metadata = 3;
  FindingType type = 4;
}

message EvaluateTxResponse {
  ResponseStatus status = 1;
  repeated Error errors = 2;
  repeated Finding findings = 3;
  map<string, string> metadata = 4;
}

message EvaluateBlockResponse {
  ResponseStatus status = 1;
  repeated Error errors = 2;
  repeated Finding findings = 3;
  map<string, string> metadata = 4;
}

message BlockEvent {
  enum EventType {
    BLOCK = 0;
    REORG = 1;
  }
  message Network {
    string chainId = 1;
  }
  EventType type = 1;
  string blockHash = 2;
  string blockNumber = 3;
  Network network = 4;
}

message TransactionEvent {

  enum EventType {
    BLOCK = 0;
    REORG = 1;
  }

  message Network {
    string chainId = 1;
  }

  message EthBlock {
    string blockHash = 1;
    string blockNumber = 2;
  }

  message EthTransaction {
    string type = 1;
    string nonce = 2;
    string gasPrice = 3;
    string gas = 4;
    string value = 5;
    string input = 6;
    string v = 7;
    string r = 8;
    string s = 9;
    string to = 10;
    string hash = 11;
  }

  message Log {
    string address = 1;
    repeated string topics = 2;
    string data = 3;
    string blockNumber = 4;
    string transactionHash = 5;
    string transactionIndex = 6;
    string blockHash = 7;
    string logIndex = 8;
    bool removed = 9;
  }

  message EthReceipt {
    string root = 1;
    string status = 2;
    string cumulativeGasUsed = 3;
    string logsBloom = 4;
    repeated Log logs = 5;
    string transactionHash = 6;
    string contractAddress = 7;
    string gasUsed = 8;
    string blockHash = 9;
    string blockNumber = 10;
    string transactionIndex = 11;
  }

  message TraceAction {
   string callType = 1;
   string to = 2;
   string input = 3;
   string from = 4;
   string value = 5;
   string init = 6;
   string address = 7;
   string balance = 8;
   string refundAddress = 9;
  }

  message TraceResult {
    string gasUsed = 1;
    string address = 2;
    string code = 3;
  }

  message Trace {
    TraceAction action = 1;
    string blockHash = 2;
    string blockNumber = 3;
    TraceResult result = 4;
    int64 subtraces = 5;
    repeated int64 traceAddress = 6;
    string transactionHash = 7;
    int64 transactionPosition = 8;
    string type = 9;
    string error = 10;
  }

  EventType type = 1;
  EthTransaction transaction = 2;
  EthReceipt receipt = 3;
  Network network = 4;
  repeated Trace traces = 5;
}