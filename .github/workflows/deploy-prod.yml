name: Deploy Prod

on:
  workflow_dispatch: 
    branches: [ master ]

jobs:
  containers:
    name: Build and push containers
    runs-on: ubuntu-latest
    environment: prod
    outputs:
      scanner-image-ref: ${{ steps.write-output.outputs.scanner-image-ref }}
      query-image-ref: ${{ steps.write-output.outputs.query-image-ref }}
      json-rpc-image-ref: ${{ steps.write-output.outputs.json-rpc-image-ref }}
    strategy:
      matrix:
        image-name: [
            "scanner",
            "query",
            "json-rpc"
        ]
    steps:
      - name: Clear artifacts
        uses: kolpav/purge-artifacts-action@v1
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 7days
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and push container
        id: build-and-push
        uses: ./.github/actions/build-push
        with:
          registry: disco.forta.network
          name: ${{ matrix.image-name }}
      - name: Write image reference as output
        id: write-output
        run: echo "::set-output name=${{ matrix.image-name }}-image-ref::${{ steps.build-and-push.outputs.image-reference }}"

  build-deploy:
    name: Build and deploy
    needs: containers
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Echo Image References
        run: |
          echo "scanner=${{ needs.containers.outputs.scanner-image-ref }}"
          echo "query=${{ needs.containers.outputs.query-image-ref }}"
          echo "json-rpc=${{ needs.containers.outputs.json-rpc-image-ref }}"
      - name: Clear artifacts
        uses: kolpav/purge-artifacts-action@v1
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          expire-in: 7days
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Create build for revision
        run: |
          ./scripts/build.sh ${{ needs.containers.outputs.scanner-image-ref }} ${{ needs.containers.outputs.query-image-ref }} ${{ needs.containers.outputs.json-rpc-image-ref }} 'remote'
          chmod 755 forta
      - name: Configure AWS credentials (build artifact -> S3)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_RELEASE_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.PROD_RELEASE_AWS_SECRET_KEY }}
          aws-region: us-east-1
      - name: Copy build to build artifacts bucket
        env:
          BUCKET_NAME: ${{ secrets.PROD_BUILD_ARTIFACTS_BUCKET_NAME }}
          REVISION: ${{ github.sha }}
        run: |
          aws s3 cp forta "s3://$BUCKET_NAME/forta-$REVISION"
      - name: Configure AWS credentials (CodeDeploy)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_DEPLOY_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.PROD_DEPLOY_AWS_SECRET_KEY }}
          aws-region: us-east-1
      - name: Prepare Distribution
        run: |
          mkdir dist
          cp forta dist/
          cp appspec.yml dist/
          cp -R scripts dist/
      - name: Zip Distribution
        uses: vimtor/action-zip@v1
        with:
          files: dist/
          dest: deploy.zip
      - uses: actions/upload-artifact@v1
        with:
          name: deploy-artifact
          path: ${{ github.workspace }}/deploy.zip
      - name: AWS CodeDeploy
        uses: sourcetoad/aws-codedeploy-action@v1
        with:
          aws_access_key: ${{ secrets.PROD_DEPLOY_AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.PROD_DEPLOY_AWS_SECRET_KEY }}
          aws_region: us-east-1
          codedeploy_name: prod-forta-node
          codedeploy_group: prod-forta-deploy-group
          s3_bucket: prod-forta-codedeploy
          s3_folder: prod
          directory: ./dist/
