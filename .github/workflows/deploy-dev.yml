name: Deploy Dev

on:
  pull_request:
    branches: [ master ]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Install protoc-gen-go-grpc
        run: |
          go get -u github.com/golang/protobuf/protoc-gen-go
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_DEPLOY_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_DEPLOY_AWS_SECRET_KEY }}
          aws-region: ${{ secrets.DEV_DEPLOY_AWS_REGION }}
      - name: Make Containers
        run: |
          make build
          chmod 755 fortify
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Populate Templates
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          GITHUB_HASH: ${{ github.sha }}
        run: |
          sed -i "s/GITHUB_HASH/$GITHUB_HASH/g" config-fortify-dev.yml
          sed -i "s/ECR_REGISTRY/$ECR_REGISTRY/g" config-fortify-dev.yml
          sed -i "s/GITHUB_HASH/$GITHUB_HASH/g" scripts/load-images.sh
          sed -i "s/ECR_REGISTRY/$ECR_REGISTRY/g" scripts/load-images.sh
      - name: Build and Tag ECR images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          # scanner
          docker tag openzeppelin/fortify-scanner:latest $ECR_REGISTRY/fortify-scanner:latest
          docker tag openzeppelin/fortify-scanner:latest $ECR_REGISTRY/fortify-scanner:$IMAGE_TAG

          # query
          docker tag openzeppelin/fortify-query:latest $ECR_REGISTRY/fortify-query:latest
          docker tag openzeppelin/fortify-query:latest $ECR_REGISTRY/fortify-query:$IMAGE_TAG

          # json-rpc
          docker tag openzeppelin/fortify-json-rpc:latest $ECR_REGISTRY/fortify-json-rpc:latest
          docker tag openzeppelin/fortify-json-rpc:latest $ECR_REGISTRY/fortify-json-rpc:$IMAGE_TAG

          echo "::set-output name=image::$IMAGE_TAG"
      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/fortify-json-rpc:latest
          docker push $ECR_REGISTRY/fortify-json-rpc:$IMAGE_TAG
          docker push $ECR_REGISTRY/fortify-scanner:latest
          docker push $ECR_REGISTRY/fortify-scanner:$IMAGE_TAG
          docker push $ECR_REGISTRY/fortify-query:latest
          docker push $ECR_REGISTRY/fortify-query:$IMAGE_TAG
      - name: Prepare Distribution
        run: |
          mkdir dist
          cp fortify dist/
          cp config-fortify-dev.yml dist/config-fortify.yml
          cp appspec.yml dist/
          cp -R scripts dist/
      - name: Zip Distribution
        uses: vimtor/action-zip@v1
        with:
          files: dist/
          dest: deploy.zip
      - uses: actions/upload-artifact@v1
        with:
          name: deploy-artifact
          path: ${{ github.workspace }}/deploy.zip
      - name: AWS CodeDeploy
        uses: sourcetoad/aws-codedeploy-action@v1
        with:
          aws_access_key: ${{ secrets.DEV_DEPLOY_AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.DEV_DEPLOY_AWS_SECRET_KEY }}
          aws_region: ${{ secrets.DEV_DEPLOY_AWS_REGION }}
          codedeploy_name: ${{ secrets.DEV_CODEDEPLOY_APP }}
          codedeploy_group: ${{ secrets.DEV_CODEDEPLOY_GROUP }}
          s3_bucket: ${{ secrets.DEV_DEPLOY_BUCKET }}
          s3_folder: dev
          directory: ./dist/