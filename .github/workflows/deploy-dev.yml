on:
  push:
    branches: [ master ]

name: Deploy

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      - name: Install protoc-gen-go-grpc
        run: |
          go get -u github.com/golang/protobuf/protoc-gen-go
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: Make Containers
        run: |
          make build
          chmod 755 fortify
          sed -i 's/GITHUB_HASH/${{ github.sha }}/g' config-dev.yml
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag ECR images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          # scanner
          docker tag openzeppelin/fortify-scanner:latest $ECR_REGISTRY/fortify-scanner:latest
          docker tag openzeppelin/fortify-scanner:latest $ECR_REGISTRY/fortify-scanner:$IMAGE_TAG

          # query
          docker tag openzeppelin/fortify-query:latest $ECR_REGISTRY/fortify-query:latest
          docker tag openzeppelin/fortify-query:latest $ECR_REGISTRY/fortify-query:$IMAGE_TAG

          # json-rpc
          docker tag openzeppelin/fortify-json-rpc:latest $ECR_REGISTRY/fortify-json-rpc:latest
          docker tag openzeppelin/fortify-json-rpc:latest $ECR_REGISTRY/fortify-json-rpc:$IMAGE_TAG

          echo "::set-output name=image::$IMAGE_TAG"
      - name: Copy fortify cli to remote
        uses: garygrossgarten/github-action-scp@release
        with:
          local: fortify
          remote: /home/ec2-user/fortify/fortify
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_SSH_USER }}
          privateKey: ${{ secrets.DEV_SSH_KEY }}
      - name: Copy config yaml to remote
        uses: garygrossgarten/github-action-scp@release
        with:
          local: config-dev.yml
          remote: /home/ec2-user/fortify/config.yml
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_SSH_USER }}
          privateKey: ${{ secrets.DEV_SSH_KEY }}
      - name: Copy start script to server
        uses: garygrossgarten/github-action-scp@release
        with:
          local: scripts/start-dev.sh
          remote: /home/ec2-user/fortify/start-dev.sh
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_SSH_USER }}
          privateKey: ${{ secrets.DEV_SSH_KEY }}
      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/fortify-json-rpc:latest
          docker push $ECR_REGISTRY/fortify-json-rpc:$IMAGE_TAG
          docker push $ECR_REGISTRY/fortify-scanner:latest
          docker push $ECR_REGISTRY/fortify-scanner:$IMAGE_TAG
          docker push $ECR_REGISTRY/fortify-query:latest
          docker push $ECR_REGISTRY/fortify-query:$IMAGE_TAG
      - name: Restarting Fortify
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_SSH_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            chmod 755 /home/ec2-user/fortify/start-dev.sh
            chmod 755 /home/ec2-user/fortify/fortify
            nohup fortify/start-dev.sh ${{ github.sha }} >/dev/null 2>&1 &